"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/context/BlogContext.tsx":
/*!*************************************!*\
  !*** ./src/context/BlogContext.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlogContext: function() { return /* binding */ BlogContext; },\n/* harmony export */   BlogProvider: function() { return /* binding */ BlogProvider; },\n/* harmony export */   useBlog: function() { return /* binding */ useBlog; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ BlogContext,BlogProvider,useBlog auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst BlogContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nfunction BlogProvider(param) {\n    let { children } = param;\n    _s();\n    const [posts, setPosts] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [scanInterval, setScanInterval] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentPage, setCurrentPage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const postsPerPage = 7;\n    const loadPosts = async ()=>{\n        try {\n            const response = await fetch(\"/api/posts\");\n            if (response.ok) {\n                const data = await response.json();\n                setPosts(data);\n            }\n        } catch (err) {\n            setError(\"Failed to load posts\");\n            console.error(\"Error loading posts:\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const calculateValidationScore = (post)=>{\n        const criteria = {\n            hasImage: !!post.imageUrl,\n            hasExcerpt: !!post.excerpt && post.excerpt.length > 50,\n            hasAuthor: !!post.author,\n            wordCount: post.content.split(/\\s+/).length,\n            hasKeywords: post.content.toLowerCase().includes(\"blog\") || post.content.toLowerCase().includes(\"article\") || post.content.toLowerCase().includes(\"post\")\n        };\n        let score = 0;\n        if (criteria.hasImage) score += 20;\n        if (criteria.hasExcerpt) score += 20;\n        if (criteria.hasAuthor) score += 20;\n        if (criteria.wordCount > 300) score += 20;\n        if (criteria.hasKeywords) score += 20;\n        return score;\n    };\n    const importPosts = async ()=>{\n        try {\n            setLoading(true);\n            const response = await fetch(\"/api/scan\");\n            if (response.ok) {\n                const { posts: newPosts } = await response.json();\n                const processedPosts = newPosts.map((post)=>({\n                        ...post,\n                        status: \"pending\",\n                        validationScore: calculateValidationScore(post),\n                        validationCriteria: {\n                            hasImage: !!post.imageUrl,\n                            hasExcerpt: !!post.excerpt && post.excerpt.length > 50,\n                            hasAuthor: !!post.author,\n                            wordCount: post.content.split(/\\s+/).length,\n                            hasKeywords: post.content.toLowerCase().includes(\"blog\") || post.content.toLowerCase().includes(\"article\") || post.content.toLowerCase().includes(\"post\")\n                        }\n                    }));\n                setPosts((prev)=>[\n                        ...prev,\n                        ...processedPosts\n                    ]);\n            } else {\n                throw new Error(\"Failed to import posts\");\n            }\n        } catch (err) {\n            setError(\"Failed to import posts\");\n            console.error(\"Error importing posts:\", err);\n        } finally{\n            setLoading(false);\n        }\n    };\n    const approvePost = async (postId)=>{\n        try {\n            const response = await fetch(\"/api/posts/\".concat(postId, \"/approve\"), {\n                method: \"POST\"\n            });\n            if (response.ok) {\n                setPosts((prev)=>prev.map((post)=>post.id === postId ? {\n                            ...post,\n                            status: \"approved\"\n                        } : post));\n            } else {\n                throw new Error(\"Failed to approve post\");\n            }\n        } catch (err) {\n            setError(\"Failed to approve post\");\n            console.error(\"Error approving post:\", err);\n        }\n    };\n    const rejectPost = async (postId, reason)=>{\n        try {\n            const response = await fetch(\"/api/posts/\".concat(postId, \"/reject\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    reason\n                })\n            });\n            if (response.ok) {\n                setPosts((prev)=>prev.map((post)=>post.id === postId ? {\n                            ...post,\n                            status: \"rejected\",\n                            rejectionReason: reason\n                        } : post));\n            } else {\n                throw new Error(\"Failed to reject post\");\n            }\n        } catch (err) {\n            setError(\"Failed to reject post\");\n            console.error(\"Error rejecting post:\", err);\n        }\n    };\n    const startPeriodicScan = ()=>{\n        if (scanInterval) {\n            clearInterval(scanInterval);\n        }\n        importPosts();\n        const interval = setInterval(importPosts, 10 * 60 * 1000);\n        setScanInterval(interval);\n    };\n    const stopPeriodicScan = ()=>{\n        if (scanInterval) {\n            clearInterval(scanInterval);\n            setScanInterval(null);\n        }\n    };\n    const getPaginatedPosts = ()=>{\n        const startIndex = (currentPage - 1) * postsPerPage;\n        const endIndex = startIndex + postsPerPage;\n        return posts.filter((post)=>post.status === \"approved\").slice(startIndex, endIndex);\n    };\n    const getPendingPosts = ()=>{\n        return posts.filter((post)=>post.status === \"pending\");\n    };\n    const bulkApprovePosts = async (postIds)=>{\n        try {\n            const response = await fetch(\"/api/posts/bulk-approve\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    postIds\n                })\n            });\n            if (response.ok) {\n                setPosts((prev)=>prev.map((post)=>postIds.includes(post.id) ? {\n                            ...post,\n                            status: \"approved\"\n                        } : post));\n            } else {\n                throw new Error(\"Failed to approve posts\");\n            }\n        } catch (err) {\n            setError(\"Failed to approve posts\");\n            console.error(\"Error approving posts:\", err);\n        }\n    };\n    const bulkRejectPosts = async (postIds, reason)=>{\n        try {\n            const response = await fetch(\"/api/posts/bulk-reject\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    postIds,\n                    reason\n                })\n            });\n            if (response.ok) {\n                setPosts((prev)=>prev.map((post)=>postIds.includes(post.id) ? {\n                            ...post,\n                            status: \"rejected\",\n                            rejectionReason: reason\n                        } : post));\n            } else {\n                throw new Error(\"Failed to reject posts\");\n            }\n        } catch (err) {\n            setError(\"Failed to reject posts\");\n            console.error(\"Error rejecting posts:\", err);\n        }\n    };\n    const getPostPreview = (postId)=>{\n        return posts.find((post)=>post.id === postId);\n    };\n    const getPublishedPosts = ()=>{\n        return posts.filter((post)=>post.status === \"published\");\n    };\n    const deletePost = async (postId)=>{\n        try {\n            const response = await fetch(\"/api/posts/\".concat(postId), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to delete post\");\n            }\n            setPosts((prevPosts)=>prevPosts.filter((post)=>post.id !== postId));\n        } catch (error) {\n            console.error(\"Error deleting post:\", error);\n            throw error;\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        loadPosts();\n        startPeriodicScan();\n        return ()=>{\n            stopPeriodicScan();\n        };\n    }, []);\n    const totalPages = Math.ceil(posts.filter((post)=>post.status === \"approved\").length / postsPerPage);\n    const value = {\n        posts,\n        loading,\n        error,\n        importPosts,\n        startPeriodicScan,\n        stopPeriodicScan,\n        currentPage,\n        totalPages,\n        postsPerPage,\n        setCurrentPage,\n        getPaginatedPosts,\n        approvePost,\n        rejectPost,\n        getPendingPosts,\n        bulkApprovePosts,\n        bulkRejectPosts,\n        getPostPreview,\n        calculateValidationScore,\n        getPublishedPosts,\n        deletePost\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(BlogContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\amino\\\\code\\\\blog\\\\src\\\\context\\\\BlogContext.tsx\",\n        lineNumber: 300,\n        columnNumber: 10\n    }, this);\n}\n_s(BlogProvider, \"cxaef+Gl2tKiR1pMcjzMqI0Ydkc=\");\n_c = BlogProvider;\nfunction useBlog() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BlogContext);\n    if (context === undefined) {\n        throw new Error(\"useBlog must be used within a BlogProvider\");\n    }\n    return context;\n}\n_s1(useBlog, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BlogProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/BlogContext.tsx\n"));

/***/ })

});